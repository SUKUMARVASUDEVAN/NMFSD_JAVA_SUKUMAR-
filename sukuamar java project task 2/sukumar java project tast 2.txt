Open a terminal and run the following commands:

 	npx create-react-app my-react-app
	cd my-react-app
	npm start

This will set up a new React app and start the development server.

Inside the src folder, create a new folder called components. Inside this folder, you can create various React components.

Example: Header.js

// src/components/Header.js
	import React from 'react';

		const Header = () => {
  		return (
    		<header>
      		<h1>My React App</h1>
    		</header>
  	);
	}

export default Header;

Example "Button.js".
// src/components/Button.js
	import React from 'react';

		const Button = ({ onClick, label }) => {
  	return (
    		<button onClick={onClick}>{label}</button>
  	);
	}

export default Button;


Now, let's use these components in the main App component.

Example: App.js.

// src/App.js
	import React from 'react';
	import Header from './components/Header';
	import Button from './components/Button';

	function App() {
  		const handleButtonClick = () => {
    		alert('Button Clicked!');
  	};

  	return (
    		<div className="App">
      		<Header />
      		<main>
        		<p>Welcome to my React app!</p>
        		<Button onClick={handleButtonClick} label="Click Me" />
      		</main>
    		</div>
  	);
	}

export default App;

You can add styling to your components. For simplicity, you can use basic inline styles or import external stylesheets.

Example: Header.js with styling


// src/components/Header.js
	import React from 'react';
	const Header = () => {
  	const headerStyle = {
    		background: '#333',
    		color: '#fff',
    		padding: '1rem',
    		textAlign: 'center',
  	};

  	return (
    		<header style={headerStyle}>
      		<h1>My React App</h1>
    		</header>
  	);
	}

export default Header;


Save your changes and check your React app. The development server should automatically reload with the updated changes.

	npm start

This is a basic example, and you can expand on it by creating more components, implementing state management with useState, and handling more complex interactions with React.




